/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   GENERAL INFORMATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

manifest {
    name = 'mpxv_nextflow'
    author = 'AG'
    description = 'nextflow wrapper for running the MPXV pipeline'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.07.1'
    version = 'latest'
}

// Global default params, used in configs
params {
    help = false

    fasta_path =  "" 
    variola = ""
    fasta_path = ""
    ref_fasta_path = ""
    meta_path = ""
    ref_gff_path = ""
    bakta_db_type = "" // light or full
    bakta_db_path = ""
    download_bakta_db = ""

    env_yml = ""
    scicomp = false

    run_submission = true
    run_vadr = false 
    run_repeatmasker_liftoff = false
    run_liftoff = false
    run_bakta = false
    cleanup = true

    clear_nextflow_log = null
    clear_work_dir = null
    clear_conda_env = null
    clear_nf_results = null

    output_dir = ""
    overwrite_output = null

    val_output_dir = ""
    val_date_format_flag = 's'
    val_keep_pi = false

    final_liftoff_output_dir = ""
    lift_print_version_exit = null
    lift_print_help_exit = null
    lift_parallel_processes = 8
    lift_delete_temp_files = null
    lift_coverage_threshold = null
    lift_child_feature_align_threshold = null
    lift_unmapped_features_file_name = 'output.unmapped_features.txt'
    lift_copy_threshold = null
    lift_distance_scaling_factor = null
    lift_flank = null
    lift_overlap = null
    lift_mismatch = null
    lift_gap_open = null
    lift_gap_extend = null
    lift_infer_transcripts = null
    lift_copies = null
    lift_minimap_path = 'N/A' 
    lift_feature_database_name = 'N/A'

    vadr_output_dir = ""
    vadr_models_dir = "$projectDir/vadr_files/mpxv-models"

    bakta_output_dir = ""
    prodigal_tf = null
    proteins = null
    bakta_min_contig_length = null
    bakta_threads = null
    bakta_genus = null
    bakta_species = null
    bakta_strain = null
    bakta_plasmid = null
    bakta_locus = null
    bakta_locus_tag = null
    bakta_translation_table = null
    
    organism = ""

    final_annotated_files_path = ""
    final_split_metas_path = ""  
    final_split_fastas_path = ""

    submission_output_dir = ""
    submission_wait_time = ""
    processed_samples = ""
    submission_config = ""
    req_col_config = ""
    batch_name = "" 
    send_submission_email = false
    submission_database = "submit"
    submission_prod_or_test = "test"

    run_conda = false
    run_docker = false
    run_singularity = false

    bacteria = false
    virus = true

   }
   

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             PROFILES 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

profiles {

    // to register which parameter set to use 
    // by default, will run the virus parameter set (default value set above)
    bacteria {
        params.bacteria = true
        params.virus = false
    }
    virus {
        params.virus = true
        params.bacteria = false
    }

    // actual parameter sets 
    standard {
        try {
            includeConfig "conf/standard_params.config"
        } catch (Exception e) {
            System.err.println("WARNING: Could not load standard_params.config from ${projectDir}/conf/")
        }
    }
    test {
        if ( params.virus == true ) {
            try {
                includeConfig "conf/test_virus_params.config" 
            } catch (Exception e) {
                System.err.println("WARNING: Could not load test_virus_params.config from ${projectDir}/conf/")
            }
        } else if (params.bacteria == true ) {
            try {
                includeConfig "conf/test_bacteria_params.config"
            } catch (Exception e) {
                    System.err.println("WARNING: Could not load test_bacteria_params.config from ${projectDir}/conf/")
            }
        }
    }

    // organism specific repeat library settings
    // if you want to add your own custom library, if you choose to use one of ours state 'varv' to use the 'varv' custom lib or 'mpox' to use the mpox custom lib
    if ( params.organism == 'varv' ) {
	    params.repeat_lib = "$projectDir/assets/lib/varv_repeats_lib.fasta"
    }
    if ( params.organism == 'mpox' ) {
	    params.repeat_lib = "$projectDir/assets/lib/MPOX_repeats_lib.fasta"
    } 


    // run docker + specify settings 
    conda {
        params.enable_conda    = true
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        conda.useMamba         = true
        
        // Just for tracking that at least one option was selected
        params.run_docker        = false
        params.run_conda         = true
        params.run_singularity   = false 
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // Just for tracking that at least one option was selected
        params.run_docker        = true
        params.run_conda         = false
        params.run_singularity   = false 

        // Specify the container name
        process {
            withLabel: main {
                container = params.docker_container
            }
        }
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // Just for tracking that at least one option was selected
        params.run_docker        = false
        params.run_conda         = false
        params.run_singularity   = true

        // Specify the container name 
        process {
            withLabel: main {
                container = params.docker_container
            }
        }
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               NEXTFLOW TOWER SETTINGS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

tower {
    enabled = false
    accessToken = '<your token>'
    workspaceId = '<your workspace id>'
}

